# Makefile.in generated by automake 1.10 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
target_triplet = @target@
bin_PROGRAMS = hierarchicalCPU$(EXEEXT) hierarchicalGPU$(EXEEXT) \
	kcentersCPU$(EXEEXT) kcentersGPU$(EXEEXT) kmeansCPU$(EXEEXT) \
	kmeansGPU$(EXEEXT) kmedoidsCPU$(EXEEXT) kmedoidsGPU$(EXEEXT) \
	kpsmeansGPU$(EXEEXT) rmsdGPU$(EXEEXT) somCPU$(EXEEXT) \
	somGPU$(EXEEXT)
subdir = examples
DIST_COMMON = README $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_hierarchicalCPU_OBJECTS =  \
	hierarchicalCPU-hierarchicalCPU.$(OBJEXT)
hierarchicalCPU_OBJECTS = $(am_hierarchicalCPU_OBJECTS)
hierarchicalCPU_DEPENDENCIES =
hierarchicalCPU_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(hierarchicalCPU_LDFLAGS) $(LDFLAGS) -o $@
am_hierarchicalGPU_OBJECTS =  \
	hierarchicalGPU-hierarchicalGPU.$(OBJEXT)
hierarchicalGPU_OBJECTS = $(am_hierarchicalGPU_OBJECTS)
hierarchicalGPU_DEPENDENCIES =
hierarchicalGPU_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(hierarchicalGPU_LDFLAGS) $(LDFLAGS) -o $@
am_kcentersCPU_OBJECTS = kcentersCPU-kcentersCPU.$(OBJEXT)
kcentersCPU_OBJECTS = $(am_kcentersCPU_OBJECTS)
kcentersCPU_DEPENDENCIES =
kcentersCPU_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(kcentersCPU_LDFLAGS) $(LDFLAGS) -o $@
am_kcentersGPU_OBJECTS = kcentersGPU-kcentersGPU.$(OBJEXT)
kcentersGPU_OBJECTS = $(am_kcentersGPU_OBJECTS)
kcentersGPU_DEPENDENCIES =
kcentersGPU_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(kcentersGPU_LDFLAGS) $(LDFLAGS) -o $@
am_kmeansCPU_OBJECTS = kmeansCPU-kmeansCPU.$(OBJEXT)
kmeansCPU_OBJECTS = $(am_kmeansCPU_OBJECTS)
kmeansCPU_DEPENDENCIES =
kmeansCPU_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(kmeansCPU_LDFLAGS) $(LDFLAGS) -o $@
am_kmeansGPU_OBJECTS = kmeansGPU-kmeansGPU.$(OBJEXT)
kmeansGPU_OBJECTS = $(am_kmeansGPU_OBJECTS)
kmeansGPU_DEPENDENCIES =
kmeansGPU_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(kmeansGPU_LDFLAGS) $(LDFLAGS) -o $@
am_kmedoidsCPU_OBJECTS = kmedoidsCPU-kmedoidsCPU.$(OBJEXT)
kmedoidsCPU_OBJECTS = $(am_kmedoidsCPU_OBJECTS)
kmedoidsCPU_DEPENDENCIES =
kmedoidsCPU_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(kmedoidsCPU_LDFLAGS) $(LDFLAGS) -o $@
am_kmedoidsGPU_OBJECTS = kmedoidsGPU-kmedoidsGPU.$(OBJEXT)
kmedoidsGPU_OBJECTS = $(am_kmedoidsGPU_OBJECTS)
kmedoidsGPU_DEPENDENCIES =
kmedoidsGPU_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(kmedoidsGPU_LDFLAGS) $(LDFLAGS) -o $@
am_kpsmeansGPU_OBJECTS = kpsmeansGPU-kpsmeansGPU.$(OBJEXT)
kpsmeansGPU_OBJECTS = $(am_kpsmeansGPU_OBJECTS)
kpsmeansGPU_DEPENDENCIES =
kpsmeansGPU_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(kpsmeansGPU_LDFLAGS) $(LDFLAGS) -o $@
am_rmsdGPU_OBJECTS = rmsdGPU-rmsdGPU.$(OBJEXT)
rmsdGPU_OBJECTS = $(am_rmsdGPU_OBJECTS)
rmsdGPU_DEPENDENCIES =
rmsdGPU_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(rmsdGPU_LDFLAGS) $(LDFLAGS) -o $@
am_somCPU_OBJECTS = somCPU-somCPU.$(OBJEXT)
somCPU_OBJECTS = $(am_somCPU_OBJECTS)
somCPU_DEPENDENCIES =
somCPU_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(somCPU_LDFLAGS) $(LDFLAGS) -o $@
am_somGPU_OBJECTS = somGPU-somGPU.$(OBJEXT)
somGPU_OBJECTS = $(am_somGPU_OBJECTS)
somGPU_DEPENDENCIES =
somGPU_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(somGPU_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I. -I$(top_builddir)@am__isrc@
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(hierarchicalCPU_SOURCES) $(hierarchicalGPU_SOURCES) \
	$(kcentersCPU_SOURCES) $(kcentersGPU_SOURCES) \
	$(kmeansCPU_SOURCES) $(kmeansGPU_SOURCES) \
	$(kmedoidsCPU_SOURCES) $(kmedoidsGPU_SOURCES) \
	$(kpsmeansGPU_SOURCES) $(rmsdGPU_SOURCES) $(somCPU_SOURCES) \
	$(somGPU_SOURCES)
DIST_SOURCES = $(hierarchicalCPU_SOURCES) $(hierarchicalGPU_SOURCES) \
	$(kcentersCPU_SOURCES) $(kcentersGPU_SOURCES) \
	$(kmeansCPU_SOURCES) $(kmeansGPU_SOURCES) \
	$(kmedoidsCPU_SOURCES) $(kmedoidsGPU_SOURCES) \
	$(kpsmeansGPU_SOURCES) $(rmsdGPU_SOURCES) $(somCPU_SOURCES) \
	$(somGPU_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CAMPAIGN_API_VERSION = @CAMPAIGN_API_VERSION@
CAMPAIGN_SO_VERSION = @CAMPAIGN_SO_VERSION@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CUDA_DEV_PATH = @CUDA_DEV_PATH@
CUDA_DYLD_PATH = @CUDA_DYLD_PATH@
CUDA_LD_PATH = @CUDA_LD_PATH@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
FGREP = @FGREP@
GREP = @GREP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIPO = @LIPO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
NM = @NM@
NMEDIT = @NMEDIT@
OBJEXT = @OBJEXT@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
RANLIB = @RANLIB@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
lt_ECHO = @lt_ECHO@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target = @target@
target_alias = @target_alias@
target_cpu = @target_cpu@
target_os = @target_os@
target_vendor = @target_vendor@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
CAMPAIGN_METRIC_LIB = euclideansquared
CAMPAIGN_METRIC_NAME = CAMPAIGN_DISTANCE_EUCLIDEAN_SQUARED
hierarchicalCPU_SOURCES = hierarchicalCPU.cc 
hierarchicalCPU_LDFLAGS = -L/usr/local/cuda/lib -lcuda -lcudart
hierarchicalCPU_LDADD = -lcampaign-$(CAMPAIGN_METRIC_LIB)-1.0
hierarchicalCPU_CPPFLAGS = -I/usr/local/cuda/include -I/Developer/GPU\ Computing/C/common/inc -D$(CAMPAIGN_METRIC_NAME)
hierarchicalGPU_SOURCES = hierarchicalGPU.cc
hierarchicalGPU_LDFLAGS = -L/usr/local/cuda/lib -lcuda -lcudart
hierarchicalGPU_LDADD = -lcampaign-$(CAMPAIGN_METRIC_LIB)-1.0
hierarchicalGPU_CPPFLAGS = -I/usr/local/cuda/include -I/Developer/GPU\ Computing/C/common/inc -D$(CAMPAIGN_METRIC_NAME)
kcentersCPU_SOURCES = kcentersCPU.cc 
kcentersCPU_LDFLAGS = -L/usr/local/cuda/lib -lcuda -lcudart
kcentersCPU_LDADD = -lcampaign-$(CAMPAIGN_METRIC_LIB)-1.0
kcentersCPU_CPPFLAGS = -I/usr/local/cuda/include -I/Developer/GPU\ Computing/C/common/inc -D$(CAMPAIGN_METRIC_NAME)
kcentersGPU_SOURCES = kcentersGPU.cc
kcentersGPU_LDFLAGS = -L/usr/local/cuda/lib -lcuda -lcudart
kcentersGPU_LDADD = -lcampaign-$(CAMPAIGN_METRIC_LIB)-1.0
kcentersGPU_CPPFLAGS = -I/usr/local/cuda/include -I/Developer/GPU\ Computing/C/common/inc -D$(CAMPAIGN_METRIC_NAME)
kmeansCPU_SOURCES = kmeansCPU.cc 
kmeansCPU_LDFLAGS = -L/usr/local/cuda/lib -lcuda -lcudart
kmeansCPU_LDADD = -lcampaign-$(CAMPAIGN_METRIC_LIB)-1.0
kmeansCPU_CPPFLAGS = -I/usr/local/cuda/include -I/Developer/GPU\ Computing/C/common/inc -D$(CAMPAIGN_METRIC_NAME)
kmeansGPU_SOURCES = kmeansGPU.cc
kmeansGPU_LDFLAGS = -L/usr/local/cuda/lib -lcuda -lcudart
kmeansGPU_LDADD = -lcampaign-$(CAMPAIGN_METRIC_LIB)-1.0
kmeansGPU_CPPFLAGS = -I/usr/local/cuda/include -I/Developer/GPU\ Computing/C/common/inc -D$(CAMPAIGN_METRIC_NAME)
kmedoidsCPU_SOURCES = kmedoidsCPU.cc 
kmedoidsCPU_LDFLAGS = -L/usr/local/cuda/lib -lcuda -lcudart
kmedoidsCPU_LDADD = -lcampaign-$(CAMPAIGN_METRIC_LIB)-1.0
kmedoidsCPU_CPPFLAGS = -I/usr/local/cuda/include -I/Developer/GPU\ Computing/C/common/inc -D$(CAMPAIGN_METRIC_NAME)
kmedoidsGPU_SOURCES = kmedoidsGPU.cc
kmedoidsGPU_LDFLAGS = -L/usr/local/cuda/lib -lcuda -lcudart
kmedoidsGPU_LDADD = -lcampaign-$(CAMPAIGN_METRIC_LIB)-1.0
kmedoidsGPU_CPPFLAGS = -I/usr/local/cuda/include -I/Developer/GPU\ Computing/C/common/inc -D$(CAMPAIGN_METRIC_NAME)
kpsmeansGPU_SOURCES = kpsmeansGPU.cc
kpsmeansGPU_LDFLAGS = -L/usr/local/cuda/lib -lcuda -lcudart
kpsmeansGPU_LDADD = -lcampaign-$(CAMPAIGN_METRIC_LIB)-1.0
kpsmeansGPU_CPPFLAGS = -I/usr/local/cuda/include -I/Developer/GPU\ Computing/C/common/inc -D$(CAMPAIGN_METRIC_NAME)
rmsdGPU_SOURCES = rmsdGPU.cc
rmsdGPU_LDFLAGS = -L/usr/local/cuda/lib -lcuda -lcudart
rmsdGPU_LDADD = -lcampaign-$(CAMPAIGN_METRIC_LIB)-1.0
rmsdGPU_CPPFLAGS = -I/usr/local/cuda/include -I/Developer/GPU\ Computing/C/common/inc -D$(CAMPAIGN_METRIC_NAME)
somCPU_SOURCES = somCPU.cc 
somCPU_LDFLAGS = -L/usr/local/cuda/lib -lcuda -lcudart
somCPU_LDADD = -lcampaign-$(CAMPAIGN_METRIC_LIB)-1.0
somCPU_CPPFLAGS = -I/usr/local/cuda/include -I/Developer/GPU\ Computing/C/common/inc -D$(CAMPAIGN_METRIC_NAME)
somGPU_SOURCES = somGPU.cc
somGPU_LDFLAGS = -L/usr/local/cuda/lib -lcuda -lcudart
somGPU_LDADD = -lcampaign-$(CAMPAIGN_METRIC_LIB)-1.0
somGPU_CPPFLAGS = -I/usr/local/cuda/include -I/Developer/GPU\ Computing/C/common/inc -D$(CAMPAIGN_METRIC_NAME)
all: all-am

.SUFFIXES:
.SUFFIXES: .cc .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  examples/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  examples/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
hierarchicalCPU$(EXEEXT): $(hierarchicalCPU_OBJECTS) $(hierarchicalCPU_DEPENDENCIES) 
	@rm -f hierarchicalCPU$(EXEEXT)
	$(hierarchicalCPU_LINK) $(hierarchicalCPU_OBJECTS) $(hierarchicalCPU_LDADD) $(LIBS)
hierarchicalGPU$(EXEEXT): $(hierarchicalGPU_OBJECTS) $(hierarchicalGPU_DEPENDENCIES) 
	@rm -f hierarchicalGPU$(EXEEXT)
	$(hierarchicalGPU_LINK) $(hierarchicalGPU_OBJECTS) $(hierarchicalGPU_LDADD) $(LIBS)
kcentersCPU$(EXEEXT): $(kcentersCPU_OBJECTS) $(kcentersCPU_DEPENDENCIES) 
	@rm -f kcentersCPU$(EXEEXT)
	$(kcentersCPU_LINK) $(kcentersCPU_OBJECTS) $(kcentersCPU_LDADD) $(LIBS)
kcentersGPU$(EXEEXT): $(kcentersGPU_OBJECTS) $(kcentersGPU_DEPENDENCIES) 
	@rm -f kcentersGPU$(EXEEXT)
	$(kcentersGPU_LINK) $(kcentersGPU_OBJECTS) $(kcentersGPU_LDADD) $(LIBS)
kmeansCPU$(EXEEXT): $(kmeansCPU_OBJECTS) $(kmeansCPU_DEPENDENCIES) 
	@rm -f kmeansCPU$(EXEEXT)
	$(kmeansCPU_LINK) $(kmeansCPU_OBJECTS) $(kmeansCPU_LDADD) $(LIBS)
kmeansGPU$(EXEEXT): $(kmeansGPU_OBJECTS) $(kmeansGPU_DEPENDENCIES) 
	@rm -f kmeansGPU$(EXEEXT)
	$(kmeansGPU_LINK) $(kmeansGPU_OBJECTS) $(kmeansGPU_LDADD) $(LIBS)
kmedoidsCPU$(EXEEXT): $(kmedoidsCPU_OBJECTS) $(kmedoidsCPU_DEPENDENCIES) 
	@rm -f kmedoidsCPU$(EXEEXT)
	$(kmedoidsCPU_LINK) $(kmedoidsCPU_OBJECTS) $(kmedoidsCPU_LDADD) $(LIBS)
kmedoidsGPU$(EXEEXT): $(kmedoidsGPU_OBJECTS) $(kmedoidsGPU_DEPENDENCIES) 
	@rm -f kmedoidsGPU$(EXEEXT)
	$(kmedoidsGPU_LINK) $(kmedoidsGPU_OBJECTS) $(kmedoidsGPU_LDADD) $(LIBS)
kpsmeansGPU$(EXEEXT): $(kpsmeansGPU_OBJECTS) $(kpsmeansGPU_DEPENDENCIES) 
	@rm -f kpsmeansGPU$(EXEEXT)
	$(kpsmeansGPU_LINK) $(kpsmeansGPU_OBJECTS) $(kpsmeansGPU_LDADD) $(LIBS)
rmsdGPU$(EXEEXT): $(rmsdGPU_OBJECTS) $(rmsdGPU_DEPENDENCIES) 
	@rm -f rmsdGPU$(EXEEXT)
	$(rmsdGPU_LINK) $(rmsdGPU_OBJECTS) $(rmsdGPU_LDADD) $(LIBS)
somCPU$(EXEEXT): $(somCPU_OBJECTS) $(somCPU_DEPENDENCIES) 
	@rm -f somCPU$(EXEEXT)
	$(somCPU_LINK) $(somCPU_OBJECTS) $(somCPU_LDADD) $(LIBS)
somGPU$(EXEEXT): $(somGPU_OBJECTS) $(somGPU_DEPENDENCIES) 
	@rm -f somGPU$(EXEEXT)
	$(somGPU_LINK) $(somGPU_OBJECTS) $(somGPU_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hierarchicalCPU-hierarchicalCPU.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hierarchicalGPU-hierarchicalGPU.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kcentersCPU-kcentersCPU.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kcentersGPU-kcentersGPU.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kmeansCPU-kmeansCPU.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kmeansGPU-kmeansGPU.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kmedoidsCPU-kmedoidsCPU.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kmedoidsGPU-kmedoidsGPU.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kpsmeansGPU-kpsmeansGPU.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rmsdGPU-rmsdGPU.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/somCPU-somCPU.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/somGPU-somGPU.Po@am__quote@

.cc.o:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cc.lo:
@am__fastdepCXX_TRUE@	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(LTCXXCOMPILE) -c -o $@ $<

hierarchicalCPU-hierarchicalCPU.o: hierarchicalCPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hierarchicalCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT hierarchicalCPU-hierarchicalCPU.o -MD -MP -MF $(DEPDIR)/hierarchicalCPU-hierarchicalCPU.Tpo -c -o hierarchicalCPU-hierarchicalCPU.o `test -f 'hierarchicalCPU.cc' || echo '$(srcdir)/'`hierarchicalCPU.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/hierarchicalCPU-hierarchicalCPU.Tpo $(DEPDIR)/hierarchicalCPU-hierarchicalCPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='hierarchicalCPU.cc' object='hierarchicalCPU-hierarchicalCPU.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hierarchicalCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o hierarchicalCPU-hierarchicalCPU.o `test -f 'hierarchicalCPU.cc' || echo '$(srcdir)/'`hierarchicalCPU.cc

hierarchicalCPU-hierarchicalCPU.obj: hierarchicalCPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hierarchicalCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT hierarchicalCPU-hierarchicalCPU.obj -MD -MP -MF $(DEPDIR)/hierarchicalCPU-hierarchicalCPU.Tpo -c -o hierarchicalCPU-hierarchicalCPU.obj `if test -f 'hierarchicalCPU.cc'; then $(CYGPATH_W) 'hierarchicalCPU.cc'; else $(CYGPATH_W) '$(srcdir)/hierarchicalCPU.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/hierarchicalCPU-hierarchicalCPU.Tpo $(DEPDIR)/hierarchicalCPU-hierarchicalCPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='hierarchicalCPU.cc' object='hierarchicalCPU-hierarchicalCPU.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hierarchicalCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o hierarchicalCPU-hierarchicalCPU.obj `if test -f 'hierarchicalCPU.cc'; then $(CYGPATH_W) 'hierarchicalCPU.cc'; else $(CYGPATH_W) '$(srcdir)/hierarchicalCPU.cc'; fi`

hierarchicalGPU-hierarchicalGPU.o: hierarchicalGPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hierarchicalGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT hierarchicalGPU-hierarchicalGPU.o -MD -MP -MF $(DEPDIR)/hierarchicalGPU-hierarchicalGPU.Tpo -c -o hierarchicalGPU-hierarchicalGPU.o `test -f 'hierarchicalGPU.cc' || echo '$(srcdir)/'`hierarchicalGPU.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/hierarchicalGPU-hierarchicalGPU.Tpo $(DEPDIR)/hierarchicalGPU-hierarchicalGPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='hierarchicalGPU.cc' object='hierarchicalGPU-hierarchicalGPU.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hierarchicalGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o hierarchicalGPU-hierarchicalGPU.o `test -f 'hierarchicalGPU.cc' || echo '$(srcdir)/'`hierarchicalGPU.cc

hierarchicalGPU-hierarchicalGPU.obj: hierarchicalGPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hierarchicalGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT hierarchicalGPU-hierarchicalGPU.obj -MD -MP -MF $(DEPDIR)/hierarchicalGPU-hierarchicalGPU.Tpo -c -o hierarchicalGPU-hierarchicalGPU.obj `if test -f 'hierarchicalGPU.cc'; then $(CYGPATH_W) 'hierarchicalGPU.cc'; else $(CYGPATH_W) '$(srcdir)/hierarchicalGPU.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/hierarchicalGPU-hierarchicalGPU.Tpo $(DEPDIR)/hierarchicalGPU-hierarchicalGPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='hierarchicalGPU.cc' object='hierarchicalGPU-hierarchicalGPU.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(hierarchicalGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o hierarchicalGPU-hierarchicalGPU.obj `if test -f 'hierarchicalGPU.cc'; then $(CYGPATH_W) 'hierarchicalGPU.cc'; else $(CYGPATH_W) '$(srcdir)/hierarchicalGPU.cc'; fi`

kcentersCPU-kcentersCPU.o: kcentersCPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kcentersCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT kcentersCPU-kcentersCPU.o -MD -MP -MF $(DEPDIR)/kcentersCPU-kcentersCPU.Tpo -c -o kcentersCPU-kcentersCPU.o `test -f 'kcentersCPU.cc' || echo '$(srcdir)/'`kcentersCPU.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/kcentersCPU-kcentersCPU.Tpo $(DEPDIR)/kcentersCPU-kcentersCPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='kcentersCPU.cc' object='kcentersCPU-kcentersCPU.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kcentersCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o kcentersCPU-kcentersCPU.o `test -f 'kcentersCPU.cc' || echo '$(srcdir)/'`kcentersCPU.cc

kcentersCPU-kcentersCPU.obj: kcentersCPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kcentersCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT kcentersCPU-kcentersCPU.obj -MD -MP -MF $(DEPDIR)/kcentersCPU-kcentersCPU.Tpo -c -o kcentersCPU-kcentersCPU.obj `if test -f 'kcentersCPU.cc'; then $(CYGPATH_W) 'kcentersCPU.cc'; else $(CYGPATH_W) '$(srcdir)/kcentersCPU.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/kcentersCPU-kcentersCPU.Tpo $(DEPDIR)/kcentersCPU-kcentersCPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='kcentersCPU.cc' object='kcentersCPU-kcentersCPU.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kcentersCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o kcentersCPU-kcentersCPU.obj `if test -f 'kcentersCPU.cc'; then $(CYGPATH_W) 'kcentersCPU.cc'; else $(CYGPATH_W) '$(srcdir)/kcentersCPU.cc'; fi`

kcentersGPU-kcentersGPU.o: kcentersGPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kcentersGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT kcentersGPU-kcentersGPU.o -MD -MP -MF $(DEPDIR)/kcentersGPU-kcentersGPU.Tpo -c -o kcentersGPU-kcentersGPU.o `test -f 'kcentersGPU.cc' || echo '$(srcdir)/'`kcentersGPU.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/kcentersGPU-kcentersGPU.Tpo $(DEPDIR)/kcentersGPU-kcentersGPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='kcentersGPU.cc' object='kcentersGPU-kcentersGPU.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kcentersGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o kcentersGPU-kcentersGPU.o `test -f 'kcentersGPU.cc' || echo '$(srcdir)/'`kcentersGPU.cc

kcentersGPU-kcentersGPU.obj: kcentersGPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kcentersGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT kcentersGPU-kcentersGPU.obj -MD -MP -MF $(DEPDIR)/kcentersGPU-kcentersGPU.Tpo -c -o kcentersGPU-kcentersGPU.obj `if test -f 'kcentersGPU.cc'; then $(CYGPATH_W) 'kcentersGPU.cc'; else $(CYGPATH_W) '$(srcdir)/kcentersGPU.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/kcentersGPU-kcentersGPU.Tpo $(DEPDIR)/kcentersGPU-kcentersGPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='kcentersGPU.cc' object='kcentersGPU-kcentersGPU.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kcentersGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o kcentersGPU-kcentersGPU.obj `if test -f 'kcentersGPU.cc'; then $(CYGPATH_W) 'kcentersGPU.cc'; else $(CYGPATH_W) '$(srcdir)/kcentersGPU.cc'; fi`

kmeansCPU-kmeansCPU.o: kmeansCPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kmeansCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT kmeansCPU-kmeansCPU.o -MD -MP -MF $(DEPDIR)/kmeansCPU-kmeansCPU.Tpo -c -o kmeansCPU-kmeansCPU.o `test -f 'kmeansCPU.cc' || echo '$(srcdir)/'`kmeansCPU.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/kmeansCPU-kmeansCPU.Tpo $(DEPDIR)/kmeansCPU-kmeansCPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='kmeansCPU.cc' object='kmeansCPU-kmeansCPU.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kmeansCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o kmeansCPU-kmeansCPU.o `test -f 'kmeansCPU.cc' || echo '$(srcdir)/'`kmeansCPU.cc

kmeansCPU-kmeansCPU.obj: kmeansCPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kmeansCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT kmeansCPU-kmeansCPU.obj -MD -MP -MF $(DEPDIR)/kmeansCPU-kmeansCPU.Tpo -c -o kmeansCPU-kmeansCPU.obj `if test -f 'kmeansCPU.cc'; then $(CYGPATH_W) 'kmeansCPU.cc'; else $(CYGPATH_W) '$(srcdir)/kmeansCPU.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/kmeansCPU-kmeansCPU.Tpo $(DEPDIR)/kmeansCPU-kmeansCPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='kmeansCPU.cc' object='kmeansCPU-kmeansCPU.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kmeansCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o kmeansCPU-kmeansCPU.obj `if test -f 'kmeansCPU.cc'; then $(CYGPATH_W) 'kmeansCPU.cc'; else $(CYGPATH_W) '$(srcdir)/kmeansCPU.cc'; fi`

kmeansGPU-kmeansGPU.o: kmeansGPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kmeansGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT kmeansGPU-kmeansGPU.o -MD -MP -MF $(DEPDIR)/kmeansGPU-kmeansGPU.Tpo -c -o kmeansGPU-kmeansGPU.o `test -f 'kmeansGPU.cc' || echo '$(srcdir)/'`kmeansGPU.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/kmeansGPU-kmeansGPU.Tpo $(DEPDIR)/kmeansGPU-kmeansGPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='kmeansGPU.cc' object='kmeansGPU-kmeansGPU.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kmeansGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o kmeansGPU-kmeansGPU.o `test -f 'kmeansGPU.cc' || echo '$(srcdir)/'`kmeansGPU.cc

kmeansGPU-kmeansGPU.obj: kmeansGPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kmeansGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT kmeansGPU-kmeansGPU.obj -MD -MP -MF $(DEPDIR)/kmeansGPU-kmeansGPU.Tpo -c -o kmeansGPU-kmeansGPU.obj `if test -f 'kmeansGPU.cc'; then $(CYGPATH_W) 'kmeansGPU.cc'; else $(CYGPATH_W) '$(srcdir)/kmeansGPU.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/kmeansGPU-kmeansGPU.Tpo $(DEPDIR)/kmeansGPU-kmeansGPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='kmeansGPU.cc' object='kmeansGPU-kmeansGPU.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kmeansGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o kmeansGPU-kmeansGPU.obj `if test -f 'kmeansGPU.cc'; then $(CYGPATH_W) 'kmeansGPU.cc'; else $(CYGPATH_W) '$(srcdir)/kmeansGPU.cc'; fi`

kmedoidsCPU-kmedoidsCPU.o: kmedoidsCPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kmedoidsCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT kmedoidsCPU-kmedoidsCPU.o -MD -MP -MF $(DEPDIR)/kmedoidsCPU-kmedoidsCPU.Tpo -c -o kmedoidsCPU-kmedoidsCPU.o `test -f 'kmedoidsCPU.cc' || echo '$(srcdir)/'`kmedoidsCPU.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/kmedoidsCPU-kmedoidsCPU.Tpo $(DEPDIR)/kmedoidsCPU-kmedoidsCPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='kmedoidsCPU.cc' object='kmedoidsCPU-kmedoidsCPU.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kmedoidsCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o kmedoidsCPU-kmedoidsCPU.o `test -f 'kmedoidsCPU.cc' || echo '$(srcdir)/'`kmedoidsCPU.cc

kmedoidsCPU-kmedoidsCPU.obj: kmedoidsCPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kmedoidsCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT kmedoidsCPU-kmedoidsCPU.obj -MD -MP -MF $(DEPDIR)/kmedoidsCPU-kmedoidsCPU.Tpo -c -o kmedoidsCPU-kmedoidsCPU.obj `if test -f 'kmedoidsCPU.cc'; then $(CYGPATH_W) 'kmedoidsCPU.cc'; else $(CYGPATH_W) '$(srcdir)/kmedoidsCPU.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/kmedoidsCPU-kmedoidsCPU.Tpo $(DEPDIR)/kmedoidsCPU-kmedoidsCPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='kmedoidsCPU.cc' object='kmedoidsCPU-kmedoidsCPU.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kmedoidsCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o kmedoidsCPU-kmedoidsCPU.obj `if test -f 'kmedoidsCPU.cc'; then $(CYGPATH_W) 'kmedoidsCPU.cc'; else $(CYGPATH_W) '$(srcdir)/kmedoidsCPU.cc'; fi`

kmedoidsGPU-kmedoidsGPU.o: kmedoidsGPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kmedoidsGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT kmedoidsGPU-kmedoidsGPU.o -MD -MP -MF $(DEPDIR)/kmedoidsGPU-kmedoidsGPU.Tpo -c -o kmedoidsGPU-kmedoidsGPU.o `test -f 'kmedoidsGPU.cc' || echo '$(srcdir)/'`kmedoidsGPU.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/kmedoidsGPU-kmedoidsGPU.Tpo $(DEPDIR)/kmedoidsGPU-kmedoidsGPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='kmedoidsGPU.cc' object='kmedoidsGPU-kmedoidsGPU.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kmedoidsGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o kmedoidsGPU-kmedoidsGPU.o `test -f 'kmedoidsGPU.cc' || echo '$(srcdir)/'`kmedoidsGPU.cc

kmedoidsGPU-kmedoidsGPU.obj: kmedoidsGPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kmedoidsGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT kmedoidsGPU-kmedoidsGPU.obj -MD -MP -MF $(DEPDIR)/kmedoidsGPU-kmedoidsGPU.Tpo -c -o kmedoidsGPU-kmedoidsGPU.obj `if test -f 'kmedoidsGPU.cc'; then $(CYGPATH_W) 'kmedoidsGPU.cc'; else $(CYGPATH_W) '$(srcdir)/kmedoidsGPU.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/kmedoidsGPU-kmedoidsGPU.Tpo $(DEPDIR)/kmedoidsGPU-kmedoidsGPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='kmedoidsGPU.cc' object='kmedoidsGPU-kmedoidsGPU.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kmedoidsGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o kmedoidsGPU-kmedoidsGPU.obj `if test -f 'kmedoidsGPU.cc'; then $(CYGPATH_W) 'kmedoidsGPU.cc'; else $(CYGPATH_W) '$(srcdir)/kmedoidsGPU.cc'; fi`

kpsmeansGPU-kpsmeansGPU.o: kpsmeansGPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kpsmeansGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT kpsmeansGPU-kpsmeansGPU.o -MD -MP -MF $(DEPDIR)/kpsmeansGPU-kpsmeansGPU.Tpo -c -o kpsmeansGPU-kpsmeansGPU.o `test -f 'kpsmeansGPU.cc' || echo '$(srcdir)/'`kpsmeansGPU.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/kpsmeansGPU-kpsmeansGPU.Tpo $(DEPDIR)/kpsmeansGPU-kpsmeansGPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='kpsmeansGPU.cc' object='kpsmeansGPU-kpsmeansGPU.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kpsmeansGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o kpsmeansGPU-kpsmeansGPU.o `test -f 'kpsmeansGPU.cc' || echo '$(srcdir)/'`kpsmeansGPU.cc

kpsmeansGPU-kpsmeansGPU.obj: kpsmeansGPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kpsmeansGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT kpsmeansGPU-kpsmeansGPU.obj -MD -MP -MF $(DEPDIR)/kpsmeansGPU-kpsmeansGPU.Tpo -c -o kpsmeansGPU-kpsmeansGPU.obj `if test -f 'kpsmeansGPU.cc'; then $(CYGPATH_W) 'kpsmeansGPU.cc'; else $(CYGPATH_W) '$(srcdir)/kpsmeansGPU.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/kpsmeansGPU-kpsmeansGPU.Tpo $(DEPDIR)/kpsmeansGPU-kpsmeansGPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='kpsmeansGPU.cc' object='kpsmeansGPU-kpsmeansGPU.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(kpsmeansGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o kpsmeansGPU-kpsmeansGPU.obj `if test -f 'kpsmeansGPU.cc'; then $(CYGPATH_W) 'kpsmeansGPU.cc'; else $(CYGPATH_W) '$(srcdir)/kpsmeansGPU.cc'; fi`

rmsdGPU-rmsdGPU.o: rmsdGPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(rmsdGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT rmsdGPU-rmsdGPU.o -MD -MP -MF $(DEPDIR)/rmsdGPU-rmsdGPU.Tpo -c -o rmsdGPU-rmsdGPU.o `test -f 'rmsdGPU.cc' || echo '$(srcdir)/'`rmsdGPU.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/rmsdGPU-rmsdGPU.Tpo $(DEPDIR)/rmsdGPU-rmsdGPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='rmsdGPU.cc' object='rmsdGPU-rmsdGPU.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(rmsdGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o rmsdGPU-rmsdGPU.o `test -f 'rmsdGPU.cc' || echo '$(srcdir)/'`rmsdGPU.cc

rmsdGPU-rmsdGPU.obj: rmsdGPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(rmsdGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT rmsdGPU-rmsdGPU.obj -MD -MP -MF $(DEPDIR)/rmsdGPU-rmsdGPU.Tpo -c -o rmsdGPU-rmsdGPU.obj `if test -f 'rmsdGPU.cc'; then $(CYGPATH_W) 'rmsdGPU.cc'; else $(CYGPATH_W) '$(srcdir)/rmsdGPU.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/rmsdGPU-rmsdGPU.Tpo $(DEPDIR)/rmsdGPU-rmsdGPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='rmsdGPU.cc' object='rmsdGPU-rmsdGPU.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(rmsdGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o rmsdGPU-rmsdGPU.obj `if test -f 'rmsdGPU.cc'; then $(CYGPATH_W) 'rmsdGPU.cc'; else $(CYGPATH_W) '$(srcdir)/rmsdGPU.cc'; fi`

somCPU-somCPU.o: somCPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(somCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT somCPU-somCPU.o -MD -MP -MF $(DEPDIR)/somCPU-somCPU.Tpo -c -o somCPU-somCPU.o `test -f 'somCPU.cc' || echo '$(srcdir)/'`somCPU.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/somCPU-somCPU.Tpo $(DEPDIR)/somCPU-somCPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='somCPU.cc' object='somCPU-somCPU.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(somCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o somCPU-somCPU.o `test -f 'somCPU.cc' || echo '$(srcdir)/'`somCPU.cc

somCPU-somCPU.obj: somCPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(somCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT somCPU-somCPU.obj -MD -MP -MF $(DEPDIR)/somCPU-somCPU.Tpo -c -o somCPU-somCPU.obj `if test -f 'somCPU.cc'; then $(CYGPATH_W) 'somCPU.cc'; else $(CYGPATH_W) '$(srcdir)/somCPU.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/somCPU-somCPU.Tpo $(DEPDIR)/somCPU-somCPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='somCPU.cc' object='somCPU-somCPU.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(somCPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o somCPU-somCPU.obj `if test -f 'somCPU.cc'; then $(CYGPATH_W) 'somCPU.cc'; else $(CYGPATH_W) '$(srcdir)/somCPU.cc'; fi`

somGPU-somGPU.o: somGPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(somGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT somGPU-somGPU.o -MD -MP -MF $(DEPDIR)/somGPU-somGPU.Tpo -c -o somGPU-somGPU.o `test -f 'somGPU.cc' || echo '$(srcdir)/'`somGPU.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/somGPU-somGPU.Tpo $(DEPDIR)/somGPU-somGPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='somGPU.cc' object='somGPU-somGPU.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(somGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o somGPU-somGPU.o `test -f 'somGPU.cc' || echo '$(srcdir)/'`somGPU.cc

somGPU-somGPU.obj: somGPU.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(somGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT somGPU-somGPU.obj -MD -MP -MF $(DEPDIR)/somGPU-somGPU.Tpo -c -o somGPU-somGPU.obj `if test -f 'somGPU.cc'; then $(CYGPATH_W) 'somGPU.cc'; else $(CYGPATH_W) '$(srcdir)/somGPU.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/somGPU-somGPU.Tpo $(DEPDIR)/somGPU-somGPU.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='somGPU.cc' object='somGPU-somGPU.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(somGPU_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o somGPU-somGPU.obj `if test -f 'somGPU.cc'; then $(CYGPATH_W) 'somGPU.cc'; else $(CYGPATH_W) '$(srcdir)/somGPU.cc'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-binPROGRAMS

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
